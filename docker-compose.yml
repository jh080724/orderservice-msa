version: '3.8'
services:
  config-service:
    image: 124355678220.dkr.ecr.ap-northeast-2.amazonaws.com/config-service:latest # ECR에 push한 이미지 이름
    container_name: config-service
    ports:
      - "8888:8888"
    networks:
      - msa-network
    restart: always # 인스턴스 시작하면 컨테이너도 실행 설정

  discovery-service:
    image: 124355678220.dkr.ecr.ap-northeast-2.amazonaws.com/discovery-service:latest
    container_name: discovery-service
    ports:
      - "8761:8761"
    networks:
      - msa-network
    restart: always

  gateway-service:
    image: 124355678220.dkr.ecr.ap-northeast-2.amazonaws.com/gateway-service:latest
    container_name: gateway-service
    ports:
      - "8000:8000"
    networks:
      - msa-network
    depends_on:
      - discovery-service
      - config-service
    restart: always

  user-service:
    image: 124355678220.dkr.ecr.ap-northeast-2.amazonaws.com/user-service:latest
    container_name: user-service
    networks:
      - msa-network
    depends_on:
      - discovery-service
      - config-service
    restart: always

  order-service:
    image: 124355678220.dkr.ecr.ap-northeast-2.amazonaws.com/order-service:latest
    container_name: order-service
    networks:
      - msa-network
    depends_on:
      - discovery-service
      - config-service
    restart: always

  product-service:
    image: 124355678220.dkr.ecr.ap-northeast-2.amazonaws.com/product-service:latest
    container_name: product-service
    networks:
      - msa-network
    depends_on:
      - discovery-service
      - config-service
    restart: always

  redis:
    image: redis:latest
    ports:
      - '6379:6379'

networks:
  msa-network:
    driver: bridge  # Docker 의 기본 네트워크 드라이버. 동일한 호스트 내에서 통신할 수 있도록 설정.
