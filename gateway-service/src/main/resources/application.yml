server:
  port: 8000

spring:
  application:
    name: gateway-service
  cloud:
    gateway:
      globalcors:
        cors-configurations:
          "[/**]": # 모든 경로에 대한 CORS 설정 의미
            allowed-origins:
              - "http://localhost:3000"
            allowed-methods:
              - GET
              - POST
              - PUT
              - DELETE
              - OPTIONS
            allowed-headers:
              - "Content-Type"
              - "Authorization"
              - "X-Requested-With"
            allow-credentials: true
      default-filters:
        - name: GlobalFilter  # Class Name
          args:
            baseMessage: Spring Cloud Gateway Global Filter
            preLogger: true
            postLogger: true
        - name: DedupeResponseHeader
          args:
            name: Access-Control-Allow-Credentials Access-Control-Allow-Origin
            strategy: RETAIN_FIRST
      routes:
        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/doLogin
            - Method=POST
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}

        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/actuator/**
            - Method=GET, POST
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}

        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/**
          filters:
            # 요청이 서비스로 전달되기 전 헤더에서 제거하고자 하는 값이 있을 때 사용하는 필터
            - RemoveRequestHeader=Cookie   # 요청헤더에 Cookie가 있으면 제거
            # 요청 경로를 특정 패턴에 따라 새로운 경로로 변환 -> 정규표현식 사용가능(자유도 높음)
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}
#            - StripPrefix=1 -> 첫번째 접두어를 제거
            - AuthorizationHeaderFilter

        - id: product-service
          uri: lb://PRODUCT-SERVICE
          predicates:
            - Path=/product-service/**
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/product-service/(?<segment>.*), /$\{segment}
            - AuthorizationHeaderFilter

        - id: ordering-service
          uri: lb://ORDERING-SERVICE
          predicates:
            - Path=/ordering-service/**
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/ordering-service/(?<segment>.*), /$\{segment}
            - AuthorizationHeaderFilter

        - id: first-service
#          uri: http://localhost:8181  # lb://Eureka ??? Instance/Application ?
          uri: lb://FIRST-SERVICE  # lb://Eureka ??? Instance/Application ?
          predicates:   # ?? ??: first-service? ???? ?? ???? uri? ??
            - Path=/first-service/**
          filters:
#            - AddRequestHeader=first-request, first-request-value
            - CustomFilter

        - id: second-service
#          uri: http://localhost:8282
          uri: lb://SECOND-SERVICE  # lb://Eureka ??? Instance/Application ?
          predicates:   # ?? ??: second-service? ???? ?? ???? uri? ??
            - Path=/second-service/**
          filters:
#            - AddRequestHeader=second-request, second-request-value
            - name: CustomFilter  # Class Name
            - name: LoggerFilter  # Class Name
              args:
                baseMessage: hi there LoggerFilter
                preLogger: true
                postLogger: true